stages:
  - test
  - build
  - package

include:
  - template: Security/SAST.gitlab-ci.yml

default:
  tags:
    - linux
    - docker

.base-py:
  image: python:3.12-slim-bookworm
  before_script:
    - apt update
    - apt install gcc libpq-dev g++ libffi-dev make mime-support -y
    - pip install -r backend/.req/dev.txt
    - pip install -r backend/.req/ci.txt

.base-node:
  image: node:20.9-alpine3.18

lint-backend:
  extends: .base-py
  stage: test
  script:
    - cd backend
    - cp ../.ci/config-test.yaml config.yaml
    - black . --check
    - python -m pylint
      --rcfile .pylintrc
      backend
      rpidrive

sast-backend:
  extends: .base-py
  stage: test
  script:
    - cd backend
    - bandit -l -r -v .

test-backend:
  extends: .base-py
  stage: test
  services:
    - redis:7.2.1-alpine
    - postgres:16.0
  variables:
    REDIS_PORT: 6379
    REDIS_HOST: redis
    REDIS_DB: 0
    POSTGRES_DB: rpidrive
    POSTGRES_USER: heh
    POSTGRES_PASSWORD: anya;peanutz!1
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - cd backend
    - cp ../.ci/config-test.yaml config.yaml
    - python manage.py makemigrations rpidrive
    - python manage.py migrate
    - coverage run -m pytest --ds=backend.settings --junitxml=test-reports/unit-test.xml
    - coverage report --show-missing --precision=2
    - coverage xml -o ./test-reports/unit-test-coverage.xml
    - coverage xml
    - anybadge --value=$(python ../.ci/print-junit-pass-rate.py test-reports/unit-test.xml) --label='unit test' --file='unit-test-badge.svg' coverage
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/test-reports/unit-test-coverage.xml
      junit: backend/test-reports/unit-test.xml
    paths:
      - backend/unit-test-badge.svg
  coverage: '/^TOTAL.+?(\d+.\d+\%)$/'

test-frontend:
  extends: .base-node
  stage: test
  script:
    - cd frontend
    - npm ci
    - npm run lint

sast:
  stage: test

build-frontend:
  extends: .base-node
  stage: build
  script:
    - cd frontend
    - npm install react-scripts
    - npm run build
    - cd ..
    - mv frontend/build/static/* backend/static/
    - mv frontend/build/index.html backend/rpidrive/templates/
    - mv frontend/build/favicon.ico backend/static/
  artifacts:
    paths:
      - backend/
    expire_in: 1 hour

.package-docker:
  image: jdrouet/docker-with-buildx:stable
  stage: package
  tags:
    - linux
    - docker
  services:
    - docker:dind
  dependencies:
    - build-frontend
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    CI_REGISTRY: registry.gitlab.com
    CI_IMAGE_TAG: $CI_REGISTRY/kingkingyyk/rpidrive:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker buildx build --platform $ARCH -t $CI_IMAGE_TAG -f dockerfile --push .

package-amd64-docker:
  extends: .package-docker
  variables:
    ARCH: linux/amd64

package-multiarch-docker:
  extends: .package-docker
  variables:
    ARCH: linux/arm/v7,linux/arm64/v8,linux/amd64
  when: manual
